/*
 *
 *  Copyright Â© 2019 Paul Ambrose (pambrose@mac.com)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' //version '1.3.50'
    id "com.github.ben-manes.versions" //version "0.27.0"
    id 'maven-publish'
}

description = 'core-utils'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def kotlinVersion = '1.3.50'
def loggingVersion = '1.7.6'
def kluentVersion = '1.56'
def junitVersion = '5.5.2'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "io.github.microutils:kotlin-logging:${loggingVersion}"

    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
        }
    }
}

artifacts {
    archives sourcesJar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

