/*
 * Copyright Â© 2021 Paul Ambrose (pambrose@mac.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'org.jmailen.kotlinter' version "3.6.0" apply false
    id 'org.jetbrains.kotlin.jvm' version '1.6.0-RC2' apply false
    id "com.github.ben-manes.versions" version "0.39.0" apply false
}

ext {
    libraries = [
            reflect               : "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",

            coroutines_core       : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version",

            guava                 : "com.google.guava:guava:$guava_version",

            grpc_netty            : "io.grpc:grpc-netty:$grpc_version",
            grpc_protobuf         : "io.grpc:grpc-protobuf:$grpc_version",
            grpc_stub             : "io.grpc:grpc-stub:$grpc_version",
            grpc_services         : "io.grpc:grpc-services:$grpc_version",

            netty_ssl             : "io.netty:netty-tcnative-boringssl-static:$nettyTcNative_version",

            dropwizard_core       : "io.dropwizard.metrics:metrics-core:$dropwizard_version",
            dropwizard_healthcheck: "io.dropwizard.metrics:metrics-healthchecks:$dropwizard_version",
            dropwizard_servlets   : "io.dropwizard.metrics:metrics-servlets:$dropwizard_version",
            dropwizard_jmx        : "io.dropwizard.metrics:metrics-jmx:$dropwizard_version",

            exposed_core          : "org.jetbrains.exposed:exposed-core:$exposed_version",
            exposed_jdbc          : "org.jetbrains.exposed:exposed-jdbc:$exposed_version",
            exposed_jodatime      : "org.jetbrains.exposed:exposed-jodatime:$exposed_version",

            kotlin_scripting      : "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version",

            python_scripting      : "org.python:jython-standalone:$python_version",
            java_scripting        : "ch.obermuhlner:java-scriptengine:$java_version",

            jetty_server          : "org.eclipse.jetty:jetty-server:$jetty_version",
            jetty_servlet         : "org.eclipse.jetty:jetty-servlet:$jetty_version",

            ktor_server_core      : "io.ktor:ktor-server-core:$ktor_version",
            //ktor_server_plugins  : "io.ktor:ktor-server-plugins:$ktor_version",

            ktor_client_core      : "io.ktor:ktor-client-core:$ktor_version",
            ktor_client_cio       : "io.ktor:ktor-client-cio-jvm:$ktor_version",
            //ktor_client_plugins   : "io.ktor:ktor-client-plugins:$ktor_version",

            prometheus_core       : "io.prometheus:simpleclient:$prometheus_version",
            prometheus_hotspot    : "io.prometheus:simpleclient_hotspot:$prometheus_version",
            prometheus_servlet    : "io.prometheus:simpleclient_servlet:$prometheus_version",
            prometheus_dropwizard : "io.prometheus:simpleclient_dropwizard:$prometheus_version",

            redis                 : "redis.clients:jedis:$redis_version",

            zipkin                : "io.zipkin.brave:brave:$zipkin_version",

            zipkin_sender_okhttp  : "io.zipkin.reporter2:zipkin-sender-okhttp3:$zipkinSender_version",
    ]
}

allprojects {
    group 'com.github.pambrose.common-utils'
    version '1.19.0'

    apply plugin: 'java-library'  // gradle 7
    apply plugin: 'maven-publish' // required for jitpack.io install  // gradle 7
    //apply plugin: 'maven' // required for jitpack.io install   // gradle 7
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenLocal()
        //maven { url "https://maven.pkg.jetbrains.space/public/p/ktor/eap" }
        maven { url = 'https://kotlin.bintray.com/ktor' }
        maven { url = 'https://kotlin.bintray.com/kotlinx' }
        maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // gradle 7
    publishing {
        publications {
            mavenJava(MavenPublication) {
//                artifactId = 'com.github.pambrose.common-utils'
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

subprojects {

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        // This is required for the ExperimentalCoroutinesApi arg below
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$coroutines_version"

        implementation "io.github.microutils:kotlin-logging:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"

        testImplementation "org.amshove.kluent:kluent:$kluent_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    java {
        withSourcesJar()
    }

//    task sourcesJar(type: Jar, dependsOn: classes) {
//        from sourceSets.main.allJava
//        archiveClassifier.set("sources")
//    }
//
//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        archiveClassifier.set("javadoc")
//        from javadoc.destinationDir
//    }

//    publishing {
//        publications {
//            maven(MavenPublication) {
//                from components.java
//                afterEvaluate {
//                    artifact javadocJar
//                    artifact sourcesJar
//                }
//            }
//        }
//    }

    compileKotlin {
        kotlinOptions {
            //useIR = true
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xopt-in=kotlin.contracts.ExperimentalContracts',
                                 '-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                 '-Xopt-in=kotlin.time.ExperimentalTime']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            //useIR = true
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xopt-in=kotlin.time.ExperimentalTime']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    kotlinter {
        ignoreFailures = false
        indentSize = 2
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        disabledRules = ["no-wildcard-imports", "indent", "final-newline", "comment-spacing", "max-line-length"]
    }
}