/*
 *
 *  Copyright Â© 2019 Paul Ambrose (pambrose@mac.com)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71' apply false
    id "com.github.ben-manes.versions" version "0.28.0" apply false
}

ext {
    def coroutinesVersion = '1.3.4'
    def dropwizardVersion = '4.1.5'
    def grpcVersion = '1.28.1'
    def guavaVersion = '28.2-jre'
    def jettyVersion = '9.4.22.v20191022'
    def jnaVersion = "5.5.0"
    def ktorVersion = '1.3.1'
    def nettyTcNativeVersion = '2.0.30.Final'
    def prometheusVersion = '0.8.1'
    def zipkenSenderVersion = '2.12.0'
    def zipkinVersion = '5.11.2'

    libraries = [
            reflect               : "org.jetbrains.kotlin:kotlin-reflect",

            coroutines_core       : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}",
            coroutines_jdk8       : "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutinesVersion}",
            coroutines_slf4j      : "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:${coroutinesVersion}",

            guava                 : "com.google.guava:guava:${guavaVersion}",

            grpc                  : "io.grpc:grpc-all:${grpcVersion}",

            netty_ssl             : "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}",

            dropwizard_core       : "io.dropwizard.metrics:metrics-core:${dropwizardVersion}",
            dropwizard_healthcheck: "io.dropwizard.metrics:metrics-healthchecks:${dropwizardVersion}",
            dropwizard_servlets   : "io.dropwizard.metrics:metrics-servlets:${dropwizardVersion}",
            dropwizard_jmx        : "io.dropwizard.metrics:metrics-jmx:${dropwizardVersion}",

            jna                   : "net.java.dev.jna:jna:${jnaVersion}",
            jna_platform          : "net.java.dev.jna:jna-platform:${jnaVersion}",
            script_util           : "org.jetbrains.kotlin:kotlin-script-util",
            script_runtime        : "org.jetbrains.kotlin:kotlin-script-runtime",
            kotlin_compiler       : "org.jetbrains.kotlin:kotlin-compiler-embeddable",
            kotlin_scripting      : "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable",

            jetty_server          : "org.eclipse.jetty:jetty-server:${jettyVersion}",
            jetty_servlet         : "org.eclipse.jetty:jetty-servlet:${jettyVersion}",

            ktor_client_core      : "io.ktor:ktor-client-core:${ktorVersion}",
            ktor_client_cio       : "io.ktor:ktor-client-cio:${ktorVersion}",

            prometheus_core       : "io.prometheus:simpleclient:${prometheusVersion}",
            prometheus_hotspot    : "io.prometheus:simpleclient_hotspot:${prometheusVersion}",
            prometheus_servlet    : "io.prometheus:simpleclient_servlet:${prometheusVersion}",
            prometheus_dropwizard : "io.prometheus:simpleclient_dropwizard:${prometheusVersion}",

            zipkin                : "io.zipkin.brave:brave:${zipkinVersion}",

            zipkin_sender_okhttp  : "io.zipkin.reporter2:zipkin-sender-okhttp3:${zipkenSenderVersion}",
    ]
}

allprojects {
    group 'com.github.pambrose.common-utils'
    version '1.1.16'

    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        maven { url = 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

subprojects {
    def junitVersion = '5.6.1'
    def kluentVersion = '1.60'
    def loggingVersion = '1.7.9'

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        implementation "io.github.microutils:kotlin-logging:${loggingVersion}"

        testImplementation "org.amshove.kluent:kluent:$kluentVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime']
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime']
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }
}