plugins {
    id 'java'
    id 'maven-publish'

    //id 'org.jetbrains.kotlinx.kover' version '0.5.0'
    id 'com.github.kt3k.coveralls' version '2.12.2' apply false
    id 'org.jetbrains.kotlin.jvm' version '2.0.0' apply false
    id 'org.jmailen.kotlinter' version '4.3.0' apply false
    id "com.github.ben-manes.versions" version '0.51.0' apply false
}

ext {
    libraries = [
        reflect               : "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",

        guava                 : "com.google.guava:guava:$guava_version",

        grpc_netty            : "io.grpc:grpc-netty:$grpc_version",
        grpc_inprocess        : "io.grpc:grpc-inprocess:$grpc_version",
        grpc_protobuf         : "io.grpc:grpc-protobuf:$grpc_version",
        grpc_stub             : "io.grpc:grpc-stub:$grpc_version",
        grpc_services         : "io.grpc:grpc-services:$grpc_version",

        netty_ssl             : "io.netty:netty-tcnative-boringssl-static:$nettyTcNative_version",

        dropwizard_core       : "io.dropwizard.metrics:metrics-core:$dropwizard_version",
        dropwizard_healthcheck: "io.dropwizard.metrics:metrics-healthchecks:$dropwizard_version",
        dropwizard_servlets   : "io.dropwizard.metrics:metrics-servlets:$dropwizard_version",
        dropwizard_jmx        : "io.dropwizard.metrics:metrics-jmx:$dropwizard_version",

        exposed_core          : "org.jetbrains.exposed:exposed-core:$exposed_version",
        exposed_jdbc          : "org.jetbrains.exposed:exposed-jdbc:$exposed_version",
        exposed_jodatime      : "org.jetbrains.exposed:exposed-jodatime:$exposed_version",

        kotlin_scripting      : "org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version",

        python_scripting      : "org.python:jython-standalone:$python_version",
        java_scripting        : "ch.obermuhlner:java-scriptengine:$java_version",

        jetty_server          : "org.eclipse.jetty:jetty-server:$jetty_version",
        jetty_servlet         : "org.eclipse.jetty:jetty-servlet:$jetty_version",

        ktor_server_core      : "io.ktor:ktor-server:$ktor_version",
        ktor_client_core      : "io.ktor:ktor-client:$ktor_version",

        prometheus_core       : "io.prometheus:simpleclient:$prometheus_version",
        prometheus_hotspot    : "io.prometheus:simpleclient_hotspot:$prometheus_version",
        prometheus_servlet    : "io.prometheus:simpleclient_servlet:$prometheus_version",
        prometheus_dropwizard : "io.prometheus:simpleclient_dropwizard:$prometheus_version",

        redis                 : "redis.clients:jedis:$redis_version",

        brave : "io.zipkin.brave:brave:$brave_version",
        zipkin: "io.zipkin.reporter2:zipkin-reporter-brave:$zipkin_version",

        zipkin_sender_okhttp  : "io.zipkin.reporter2:zipkin-sender-okhttp3:$zipkinSender_version",
    ]
}

allprojects {
    group 'com.github.pambrose.common-utils'
    version '2.1.0'

    apply plugin: 'java-library'
    apply plugin: 'maven-publish' // required for jitpack.io install and gradle 7
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        google()
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    //cobertura.coverageSourceDirs = sourceSets.main.groovy.srcDirs

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

subprojects {

    dependencies {
        // This is required for the ExperimentalCoroutinesApi arg below
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$coroutines_version"

        implementation "io.github.oshai:kotlin-logging-jvm:$logging_version"
        implementation "ch.qos.logback:logback-classic:$logback_version"

        testImplementation "org.amshove.kluent:kluent:$kluent_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    }

    // This is to fix a bizarre gradle error
    project.getTasks().getByName("jar").setProperty("duplicatesStrategy", DuplicatesStrategy.INCLUDE);

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        from javadoc.destinationDir
        archiveClassifier = 'javadoc'
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    java {
        withSourcesJar()
    }

//    task sourcesJar(type: Jar, dependsOn: classes) {
//        from sourceSets.main.allJava
//        archiveClassifier.set("sources")
//    }
//
//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        archiveClassifier.set("javadoc")
//        from javadoc.destinationDir
//    }

    kotlin {
        jvmToolchain(17)
    }

    compileKotlin {
        kotlinOptions.freeCompilerArgs += ['-Xbackend-threads=8',
                                           '-opt-in=kotlin.contracts.ExperimentalContracts',
                                           '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
                                           '-opt-in=kotlin.time.ExperimentalTime',]
    }

    compileTestKotlin {
        kotlinOptions.freeCompilerArgs += ['-Xbackend-threads=8',
                                           '-opt-in=kotlin.time.ExperimentalTime',]
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }

    kotlinter {
        ignoreFailures = false
        reporters = ['checkstyle', 'plain']
    }

//    jacocoTestReport {
//        reports {
//            xml.enabled = true // coveralls plugin depends on xml format report
//            html.enabled = true
//        }
//    }
//
//    coveralls {
//        jacocoReportPath 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
//    }
}
